defmodule GitTest do
  use ExUnit.Case
  doctest Expublish

  import ExUnit.CaptureLog
  alias Expublish.Options
  alias Expublish.Git

  @version %Version{major: 1, minor: 0, patch: 1}

  setup do
    [options: Options.parse(["--dry-run"]), version: @version]
  end

  test "validate/1 runs without errors", %{options: options} do
    assert :ok == Git.validate(options)
  end

  test "validate/1 returns error message if working directory is not clean", %{options: options} do
    File.write!("expublish_git_validate_test", "generated by expublish test")

    assert Git.validate(options) =~ "Git working directory not clean"

    File.rm!("expublish_git_validate_test")
  end

  test "commit_and_tag/1 logs a info message", %{options: options, version: version} do
    fun = fn ->
      Git.commit_and_tag(version, options)
    end

    assert capture_log(fun) =~ "Skipping version commit"
    assert capture_log(fun) =~ "Skipping version tag"
    assert capture_log(fun) =~ "#{version}"
  end

  test "commit_and_tag/1 respects tag- and commit-prefix options", %{version: version} do
    options = Options.parse(["--dry-run", "--tag-prefix=rc", "--commit-prefix='Custom release commit'"])
    fun = fn ->
      Git.commit_and_tag(version, options)
    end

    assert capture_log(fun) =~ "Custom release commit #{version}"
    assert capture_log(fun) =~ "rc#{version}"
  end
end
