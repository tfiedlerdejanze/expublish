defmodule ExpublishTest do
  use ExUnit.Case
  doctest Expublish

  import ExUnit.CaptureLog
  alias Expublish.Options
  alias Expublish.Semver
  alias Expublish.VersionFile

  setup do
    [options: Options.parse(["--dry-run"])]
  end

  test "major/1 exits on unclean working directory", %{options: options} do
    File.write!("expublish_major_test", "generated by expublish test")

    fun = fn ->
      assert catch_exit(Expublish.major(options)) == :shutdown
    end

    assert capture_log(fun) =~ "working directory not clean"

    File.rm!("expublish_major_test")
  end

  test "major/1 runs without errors", %{options: options} do
    fun = fn ->
      test_publish(fn ->
        Expublish.major(options)
      end)
    end

    VersionFile.get_version!()
    |> Semver.major()
    |> assert_dry_run(fun)
  end

  test "minor/1 runs without errors", %{options: options} do
    fun = fn ->
      test_publish(fn ->
        Expublish.minor(options)
      end)
    end

    VersionFile.get_version!()
    |> Semver.minor()
    |> assert_dry_run(fun)
  end

  test "patch/1 runs without errors", %{options: options} do
    fun = fn ->
      test_publish(fn ->
        Expublish.patch(options)
      end)
    end

    VersionFile.get_version!()
    |> Semver.patch()
    |> assert_dry_run(fun)
  end

  test "alpha/1 runs without errors", %{options: options} do
    fun = fn ->
      test_publish(fn ->
        Expublish.alpha(options)
      end)
    end

    VersionFile.get_version!()
    |> Semver.alpha(options)
    |> assert_dry_run(fun)
  end

  test "beta/1 runs without errors", %{options: options} do
    fun = fn ->
      test_publish(fn ->
        Expublish.beta(options)
      end)
    end

    VersionFile.get_version!()
    |> Semver.beta(options)
    |> assert_dry_run(fun)
  end

  test "rc/1 runs without errors", %{options: options} do
    fun = fn ->
      test_publish(fn ->
        Expublish.rc(options)
      end)
    end

    VersionFile.get_version!()
    |> Semver.rc(options)
    |> assert_dry_run(fun)
  end

  def test_publish(fun) do
    if File.exists?("RELEASE.md") do
      fun.()
    else
      File.write!("RELEASE.md", "generated by expublish test")
      fun.()
      File.rm!("RELEASE.md")
    end
  end

  defp assert_dry_run(new_version, fun) do
    assert capture_log(fun) =~ "Skipping new entry in CHANGELOG.md"
    assert capture_log(fun) =~ "Skipping version commit"
    assert capture_log(fun) =~ "Skipping version tag"
    assert capture_log(fun) =~ "Skipping \"git push origin master --tags\""
    assert capture_log(fun) =~ "Skipping \"mix hex.publish --yes\""
    assert capture_log(fun) =~ "Finished dry run for new package version"
    assert capture_log(fun) =~ "#{new_version}"
  end
end
